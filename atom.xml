<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://AnonymityToAll.github.io</id>
    <title>maktubの圆</title>
    <updated>2020-08-18T02:59:50.823Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://AnonymityToAll.github.io"/>
    <link rel="self" href="https://AnonymityToAll.github.io/atom.xml"/>
    <subtitle>向死而生</subtitle>
    <logo>https://AnonymityToAll.github.io/images/avatar.png</logo>
    <icon>https://AnonymityToAll.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, maktubの圆</rights>
    <entry>
        <title type="html"><![CDATA[SQL刷题-牛客-补充]]></title>
        <id>https://AnonymityToAll.github.io/post/sql-shua-ti-niu-ke-bu-chong/</id>
        <link href="https://AnonymityToAll.github.io/post/sql-shua-ti-niu-ke-bu-chong/">
        </link>
        <updated>2020-08-17T02:51:20.000Z</updated>
        <content type="html"><![CDATA[<h5 id="t48">T48</h5>
<p>错误示例：</p>
<pre><code class="language-sql">update salaries
set salary = salary * 1.1
where salaries.emp_no = emp_bonus.emp_no and salaries.to_date = '9999-01-01'
</code></pre>
<p>正确示例：</p>
<pre><code class="language-sql">update salaries 
set salary=salary*1.1 
where emp_no in (select emp_no from emp_bonus) and to_date='9999-01-01';
</code></pre>
<h5 id="t50">T50</h5>
<pre><code class="language-sql">select last_name || &quot;'&quot; || first_name
from employees
</code></pre>
<p>ps:我就想问，这个题是哪里配的上是”较难“了！！！！！</p>
<h5 id="t51">T51</h5>
<pre><code class="language-sql">select length('10,A,B')-length(replace('10,A,B',',','')) 
as cnt;
</code></pre>
<p>好办法</p>
<h5 id="t52">T52</h5>
<pre><code class="language-sql">select first_name 
from employees
order by substr(first_name, length(first_name)-1, length(first_name)) asc
</code></pre>
<h5 id="t53">T53</h5>
<pre><code class="language-sql">select dept_no,group_concat(emp_no,',') as employees
from dept_emp
group by dept_no
</code></pre>
<p>主要就是关于group_concat函数的使用</p>
<h5 id="t54">T54</h5>
<p>错误示例：</p>
<pre><code class="language-sql">select avg(salary) as avg_salary
from salaries
where salary not in (select max(salary) from salaries where to_date = '9999-01-01')
and salary not in (select max(salary) from salaries where to_date = '9999-01-01')
and to_date = '9999-01-01'
</code></pre>
<p>正确示例：</p>
<pre><code class="language-sql">select avg(salary) as avg_salary
from salaries
where salary != (select max(salary) from salaries where to_date = '9999-01-01')
and salary != (select min(salary) from salaries where to_date = '9999-01-01')
and to_date = '9999-01-01'
</code></pre>
<p>其实就是一个地方错了</p>
<ul>
<li>min写成了max</li>
</ul>
<p>not in 和 != 其实是都可以的</p>
<h5 id="t55">T55</h5>
<pre><code class="language-sql">select * from employees
limit 5, 5
</code></pre>
<h5 id="t56">T56</h5>
<p>错误示例</p>
<pre><code class="language-sql">select el.emp_no, d.dept_no, eb.btype, eb.received
from employees as el 
left join dept_emp as d 
on el.emp_no = d.emp_no
left join emp_bonus as eb
on el.emp_no = eb.emp_no
</code></pre>
<p>正确示例：</p>
<pre><code class="language-sql">select el.emp_no, d.dept_no, eb.btype, eb.received
from employees as el 
left join emp_bonus as eb
on el.emp_no = eb.emp_no
join dept_emp as d 
on el.emp_no = d.emp_no
</code></pre>
<h5 id="t57">T57</h5>
<p>EXISTS 运算符用于判断查询子句是否有记录，如果有一条或多条记录存在返回 True，否则返回 False</p>
<p>错误示例</p>
<pre><code class="language-sql">select * from employees
where not exists
(select emp_no from employees
where employees.emp_no = dept_emp.emp_no)
</code></pre>
<p>正确示例：</p>
<pre><code class="language-sql">select * from employees
where emp_no not in
(select e.emp_no 
from dept_emp as d inner join employees as e 
on d.emp_no = e.emp_no)
</code></pre>
<p>这里没有用exists</p>
<pre><code class="language-sql">select * from employees
where not exists
(select emp_no from dept_emp
where employees.emp_no = dept_emp.emp_no)
</code></pre>
<p>这里不明白为啥把dept_no改成employees就不行了，筛选之后不是应该是一样的吗</p>
<h5 id="t59">T59</h5>
<p>知识点：</p>
<pre><code class="language-sql">case when sex = '1' then '男'
     when sex = '2' then '女'
     else '其他' end&lt;/span&gt;
</code></pre>
<p>错误示例：</p>
<pre><code class="language-sql">select el.emp_no, el.first_name, el.last_name, 
eb.btype, eb.salary, (case when eb.btype = 1 then eb.salary*1.1,
when eb.btype = 2 then eb.salary*1.2,
else eb.salary*1.3 end) bonus
from employees as el inner join emp_bonus as eb
on el.emp_no = eb.emp_no
where to_date = '9999-01-01'
</code></pre>
<p>正确示例：</p>
<pre><code class="language-sql">select el.emp_no, el.first_name, el.last_name, 
eb.btype, s.salary, 
(case eb.btype 
when 1 then s.salary*0.1
when 2 then s.salary*0.2
else s.salary*0.3 end) as bonus
from employees as el inner join emp_bonus as eb
on el.emp_no = eb.emp_no
inner join salaries as s 
on el.emp_no = s.emp_no and s.to_date = '9999-01-01'
</code></pre>
<p>错的地方：</p>
<ul>
<li>salary是在salaries表下的</li>
<li>case when 语句 case后面要加东西，同时各个条件之间没有“，”相连</li>
<li>其次to_date是salaries表下的</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第六讲 流量分析]]></title>
        <id>https://AnonymityToAll.github.io/post/di-liu-jiang-liu-liang-fen-xi/</id>
        <link href="https://AnonymityToAll.github.io/post/di-liu-jiang-liu-liang-fen-xi/">
        </link>
        <updated>2020-08-11T07:36:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="背景">背景</h3>
<p>有了指标体系和报表之后，最重要的事情就是每天看各种数据了，这也就是流量分析。<br>
流量分析的定义：这里流量是最广义的流量，从哪来，经过什么，产生什么价值，如果他波动了，为何波动<br>
1）渠道分析：从哪来<br>
2）转化分析：经过什么<br>
3）价值分析：产生什么价值<br>
4）波动分析、包括日常的监控分析</p>
<h3 id="渠道分析">渠道分析</h3>
<h5 id="常见渠道及其分类">常见渠道及其分类</h5>
<blockquote>
<p>内部渠道（免费）</p>
<ul>
<li>产品矩阵：头条给抖音带量</li>
</ul>
<p>外部渠道（付费）</p>
<ul>
<li>搜索引擎</li>
<li>app广告</li>
<li>社交媒体</li>
<li>软件市场</li>
</ul>
<p>拉新的</p>
</blockquote>
<h5 id="渠道推广的整个过程">渠道推广的整个过程</h5>
<blockquote>
<p>外部渠道→文案展示→落地页→下载→打开→浏览→注册→...→退出</p>
</blockquote>
<h5 id="渠道的关键指标及分析方法">渠道的关键指标及分析方法</h5>
<figure data-type="image" tabindex="1"><img src="https://AnonymityToAll.github.io/post-images/1597131393246.jpg" alt="" loading="lazy"></figure>
<h3 id="转化及价值分析">转化及价值分析</h3>
<h5 id="漏斗分析">漏斗分析</h5>
<figure data-type="image" tabindex="2"><img src="https://AnonymityToAll.github.io/post-images/1597131400723.jpg" alt="" loading="lazy"></figure>
<h5 id="功能模块价值分析">功能模块价值分析</h5>
<ul>
<li>常规分析</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://AnonymityToAll.github.io/post-images/1597131411535.jpg" alt="" loading="lazy"></figure>
<ul>
<li>价值分析</li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://AnonymityToAll.github.io/post-images/1597131420995.jpg" alt="" loading="lazy"></figure>
<ul>
<li>逻辑分析</li>
</ul>
<figure data-type="image" tabindex="5"><img src="https://AnonymityToAll.github.io/post-images/1597131444142.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://AnonymityToAll.github.io/post-images/1597131453252.jpg" alt="" loading="lazy"></figure>
<h5 id="感触">感触</h5>
<blockquote>
<p>实事求是，有数据才有结论，一定要有严谨的逻辑推理</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第五讲 指标体系构建]]></title>
        <id>https://AnonymityToAll.github.io/post/di-wu-jiang-zhi-biao-ti-xi-gou-jian/</id>
        <link href="https://AnonymityToAll.github.io/post/di-wu-jiang-zhi-biao-ti-xi-gou-jian/">
        </link>
        <updated>2020-08-11T06:59:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="指标体系的通俗定义和选取原则">指标体系的通俗定义和选取原则</h3>
<h5 id="背景">背景</h5>
<blockquote>
<p>对于某核心数据如日活，只知道数据在变化，但是不知道为何变化。产品为了解释这种现象一会要这个数，一会要那个数。</p>
<p>年底汇报时，产品跟数据要各种各样的数据，或者数据内部花费大量的时间对各种各样的口径。</p>
<p>每隔一段时间产品都会拉上数据研发一起对埋点，总是觉得当前的字段不够用，数仓要修改的越来越多，取数越来越慢，错误越来越多</p>
</blockquote>
<h5 id="原因解释">原因解释</h5>
<blockquote>
<p>根本原因在于缺少指标体系的建设、宣贯、实施。业务方不重视是因为这个活是基建活，离KPI完成太远，只有出问题时才会临时重视，数据方没中是是因为这个活是一个吃力不讨好（做好了没什么，做不好就怼你）的活，可能认为就是一个思维导图而已。</p>
<p>然而真实答案是：要想把指标体系（各个指标为啥是这些，它们的关系是啥）真正说明白不容易，而如果你说不明白，你怎么判断你自己真的很懂呢，作为埋点、取数、分析的一切前提，这个活如果做不好，会始终发现很乱。</p>
</blockquote>
<h5 id="定义以及选取原则">定义以及选取原则</h5>
<blockquote>
<p>定义：<strong>在业务的不同阶段</strong>，分析师牵头，业务方协助，指定的一套能从各维度去反映业务状况的一套待实施框架。</p>
<p>指标选取原则：根本性、可理解性、结构性</p>
<p>根本性：核心数据一定要理解到位和准确</p>
<p>可理解性：所有指标要配上业务解释性，如日活的定义是什么，打开还是点击还是进程在</p>
<p>结构性：能够充分对业务进行解读，如新增用户只是一个大数，我们还需要知道每个渠道的新增用户，每个取到的新增转化率，每个取到的新增用户价值等，</p>
</blockquote>
<h3 id="指标体系的四步法">指标体系的四步法</h3>
<h5 id="指标的构成">指标的构成</h5>
<blockquote>
<p>1原子性指标（最基础不可拆分指标）：交易额<br>
2修饰词，可选，某种场景：如搜索<br>
3时间段，时间周期：如双11<br>
4派生指标：双11这一天通过搜索带来的交易额，次日留存，日活，月活，日转化率<br>
4=1+2+3</p>
</blockquote>
<h5 id="1厘清业务阶段和方向">1.厘清业务阶段和方向</h5>
<blockquote>
<p>业务阶段：<br>
创业期 最关注的用户量<br>
上升期 最关注的优化用户量结构，看留存<br>
成熟发展期 收入指标</p>
</blockquote>
<h5 id="2确定核心指标多去了解业务和市场头部玩家">2.确定核心指标：多去了解业务和市场头部玩家</h5>
<blockquote>
<p>最重要的是找到正确的核心指标，这个不是一件容易的事，不是因为这个事情很难，而是所有人都去重新接受一些客观事实很难</p>
</blockquote>
<h5 id="3指标核心维度拆解">3.指标核心维度拆解</h5>
<blockquote>
<p>核心指标的波动必然是某种维度的波动引起的，所以要监控核心指标，本质上还是要监控维度核心指标，通用的拆解方法都是先对核心指标进行公式计算，再按照业务路径来拆。</p>
<p>当前的核心指标是停留时长大于3秒的用户数。</p>
<p>停留时长大于三秒的用户数=打开进入app的用户数*停留时长大于3秒的占比</p>
<p>打开进入app的用户数</p>
<ul>
<li>渠道转化率</li>
<li>打开方式</li>
<li>用户画像</li>
</ul>
<p>停留时长大于3秒的占比</p>
<ul>
<li>停留时长的分布</li>
<li>停留大于3秒的用户特征和行为特征</li>
<li>停留小于3秒的用户特征，有无作弊可能</li>
</ul>
</blockquote>
<h5 id="4指标宣贯-存档-落地">4.指标宣贯、存档、落地</h5>
<figure data-type="image" tabindex="1"><img src="https://AnonymityToAll.github.io/post-images/1597129202180.jpg" alt="" loading="lazy"></figure>
<h3 id="知乎app指标体系实操">知乎app指标体系实操</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第四讲 中小型企业数据分析工作]]></title>
        <id>https://AnonymityToAll.github.io/post/04-zhong-xiao-xing-qi-ye-shu-ju-fen-xi-gong-zuo/</id>
        <link href="https://AnonymityToAll.github.io/post/04-zhong-xiao-xing-qi-ye-shu-ju-fen-xi-gong-zuo/">
        </link>
        <updated>2020-08-10T12:40:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="三个问题解答">三个问题解答</h3>
<h5 id="流量波动">流量波动</h5>
<blockquote>
<p>举例：美团外卖近期订单量下降5%，需要分析师给出一些解释并提供下一步建议</p>
<p>答案：<br>
1.先对命题进行解析：<br>
订单量下降5%属于什么水位，影响范围多大，如果发现对收入有重大影响，那么这个时候CEO都会关注这件事，所以就要更加全面的考虑这件事。</p>
<p>2.具体的分析模块：</p>
<ul>
<li>常识判断：节假日啥的</li>
<li>竞品数据：饿了么数据大涨</li>
<li>外部事件：社会负面事件</li>
<li>产品变化：产品是不是发布了新的版本</li>
<li>用户行为：订单地域行为，全国都下降还是某个地区下降。</li>
<li>数据问题：数据采集，是不是口径变化</li>
</ul>
<p>3.流量波动还可能是外部作弊</p>
</blockquote>
<h5 id="常见三个app-数据分析师的思考深度怎么样好奇心怎么样">常见三个app--数据分析师的思考深度怎么样，好奇心怎么样</h5>
<blockquote>
<p>参考答案：<br>
这里的建议是：说跟应聘岗位相关的APP，比如应聘的产品的QQ音乐。<br>
这个时候你就可以说常用的三款APP是网易云音乐、微信读书、知乎，尽量给面试官透露一些你的亮点。</p>
<p>面试官进一步问：就以网易云来说，说一下你喜欢的点和想吐槽的点。</p>
<p>面试官再问：好的，那么如果你是产品经理，你会怎么解决这个问题<br>
回答：先看数据，再说对应措施。</p>
<p>面试官再问：怎么评估这样做能够带来指标的提升<br>
回答：这种先开始小流量AB测试，然后再慢慢放量，如果效果不错，就全量</p>
<p>面试官再问：怎么进行ABtest，说一下对它的看法</p>
</blockquote>
<h5 id="商业化变现对商业的最终目的是否敏感">商业化变现：对商业的最终目的是否敏感</h5>
<blockquote>
<p>举例：能不能举例一款工具类产品说明其是如何商业化的。</p>
<p>面试官问：目前产品的主要商业化收入来自哪里</p>
<p>面试官问：当前产品商业化提升的痛点是什么，之前做过哪些优化方案，效果如何</p>
<p>面试官问：能不能说一下这个项目</p>
</blockquote>
<h3 id="日常工作解析">日常工作解析</h3>
<h5 id="角色-斜杠青年救火队员啥都干">角色--斜杠青年：救火队员啥都干</h5>
<blockquote>
<ul>
<li>技术上
<ul>
<li>java，python，r都熟练，机器学习的书看了一本又一本</li>
<li>觉得技术功底还可以，但是没有真正的落地果</li>
</ul>
</li>
<li>研发埋点
<ul>
<li>字段格式，字段名，打点日志，文档沉淀</li>
</ul>
</li>
<li>口径和指标梳理
<ul>
<li>dau,mau的定义和计算方法</li>
<li>某产品的核心指标以及具体业务指标</li>
</ul>
</li>
<li>报表统计
<ul>
<li>所有的报表增加、修改</li>
<li>改来改去还是没完</li>
</ul>
</li>
<li>专题分析
<ul>
<li>开展营销活动，需要做一次活动分析</li>
<li>整体做单点分析，缺乏逻辑连贯性和全面性</li>
</ul>
</li>
<li>平台研发
<ul>
<li>希望开发内部一套大数据平台，比如数据仓库，友盟这种</li>
<li>参与开发或参与底层数据清洗</li>
</ul>
</li>
</ul>
<p>容易遇到的问题：</p>
<ul>
<li>自卑，学这学那，不落地学得快忘得快</li>
<li>自信，想着跳槽，但是好像跳不出去</li>
</ul>
</blockquote>
<h3 id="转型四步法">转型四步法</h3>
<p>一定要去大的企业做事情。</p>
<p>好工作：</p>
<ul>
<li>当前薪酬不错</li>
<li>在行业中薪酬前列</li>
</ul>
<blockquote>
<p>1.规划好自己，再评估和准备</p>
<p>数据分析三条线：</p>
<ul>
<li>业务线：对事物好奇并深入研究，思维发散并且能收敛，喜欢展示自我，逻辑思维较强</li>
<li>研发线：计算机功底好，天生的程序员基因</li>
<li>算法线：适合做研究的同学，数学功底好</li>
</ul>
<p>2.评估自己</p>
<p>业务型：</p>
<ul>
<li>产品理解能力：各种数据熟悉度，用户从哪里来，进来后做了什么</li>
<li>分析方法论：常见方法有哪些，abtest，最大概率法则，28法则，幸存者偏差理解</li>
<li>可视化能力</li>
<li>演讲能力</li>
<li>协作能力</li>
<li>逻辑思维</li>
<li>技术：excel常见操作，sql能不能闭着眼写，r能不能搭建模型并知道有哪些坑，python能否很好地用上</li>
</ul>
<p>3.优化自己1</p>
<p>3.优化自己2<br>
方法论：指标体系方法论，流量分析方法论，路径分析方法论，产品分析方法论，营销活动方法论，用户流失方法论</p>
<p>4.寻找对象并实践</p>
<p>挑选三家一般公司：面试训练<br>
挑选2家规模较大，知名度高的：保底要进（简历一定要认真写，多打磨）<br>
挑选2家业内知名公司--尝试</p>
</blockquote>
<h1 id="05-数据分析工具介绍">05 数据分析工具介绍</h1>
<h3 id="数据分析整体流程">数据分析整体流程</h3>
<ul>
<li>明确问题：先把问题定义清楚</li>
<li>搭建框架：再把问题考虑全面，找到主线</li>
<li>数据提取：mysql，hive，python</li>
<li>数据处理：excel，r，python</li>
<li>数据分析：分析方法论</li>
<li>数据展现：tableau，excel，r，python</li>
<li>转写报告：文笔功底，整体逻辑性</li>
<li>报告演讲：沟通能力，表达能力，被提问能力</li>
<li>报告闭环：最难也是最有价值的</li>
</ul>
<h3 id="excel常用操作">excel常用操作</h3>
<p>能用excel，坚决不用其他工具</p>
<h5 id="excel-对比分析筛选和色阶">excel--对比分析（筛选和色阶）</h5>
<blockquote>
<p>对比分析：所有的数据只有对比才有意义，每年的双11进行消费额对比；实际上工作中，最常见的对比对象就是大盘，比如新上线一个功能，怎么样评估这个功能效果，除了看功能使用人数，更加要做的是这个功能的留存和大盘的留存对比</p>
</blockquote>
<h5 id="excel-时间序列拆解分析透视图功能">excel--时间序列拆解分析（透视图功能）</h5>
<blockquote>
<p>时间序列二次拆解分析：一般看某指标时，都会把时序周期拉长，看数据趋势，而数据都是波动的，所以都会进行拆解分析，寻找具体波动项。</p>
</blockquote>
<h5 id="excel-相关性分析常用函数">excel--相关性分析（常用函数）</h5>
<blockquote>
<p>相关性分析：在做某个子产品的时候，都会被问到你这个子产品对大盘的贡献度或影响度，这个时候就可以用相关性去说话。</p>
</blockquote>
<h5 id="excel-临界点分析插入图标复杂功能">excel--临界点分析（插入图标复杂功能）</h5>
<blockquote>
<p>对于任何一款产品，高活跃用户与低活跃用户在产品使用上必然不同，那么就可能存在某个指标，一旦用户在这个指标的消费超过某个临界值时，后面用户会变得非常粘性，这就是magic number。</p>
</blockquote>
<h3 id="sql常见问题不是会而是要闭着眼睛都能写">sql常见问题：不是会，而是要闭着眼睛都能写</h3>
<blockquote>
<p>如何训练sql</p>
<p>利用下班时间，把你怀疑的代码，按照你认为应该的几种逻辑，全部运行一遍，然后看哪一个数据跟当前已知数据最为靠近，然后再去反推为何这样写看着更加合理。</p>
<p>sql是否熟练：当别人让你快速跑一个数的时候会很开心。</p>
<p>常见问题</p>
<blockquote>
<p>对某一个误认为是数值型但实际是字符串型字段取最大值，采用max函数<br>
解决方法：</p>
<pre><code class="language-sql">select max(a+0)
</code></pre>
<p>日期处理：日期取年月份，时间戳取日期，日期格式转换等等需求，经常出现各种问题<br>
解决方法：先百度看看用什么函数来转，在正式跑数据之前，直接select函数(a)测试下一种特殊的日期处理是北京时间和unix时间转换。</p>
<pre><code class="language-sql">select from_unixtime(time), select from_unixtime(cast(substr(time,1,10) as int))
</code></pre>
<p>先聚合再计数：如果要计算某个维度下的用户数，不要直接count(distinct imei)，少用distinct。而应该直接是：</p>
<pre><code class="language-sql">select city,count(1) as uv from(select city,imei,count(1) from a group by imei) t1 group by city
</code></pre>
<p>一列变多行：ab测试中会对一个用户大很多标签，而这些标签都存在一个字段中，所以要看标签维度指标，就要对该字段进行列变行拆解</p>
<pre><code class="language-sql">select *,b from t1 lateral view explode(a) table as b
</code></pre>
<p>取top：要看分类下的top10消费额子分类（窗口函数）</p>
<pre><code class="language-sql">select *,rank() over(partition by a order by b desc) as rank from table t1
</code></pre>
<p>避免数据倾斜：小表放在左边大表放在右边，使用mapjoin，同时对空值进行过滤</p>
<pre><code class="language-sql">select /*+mapjoin(a)*/ t1.city, t2.type,count(t1.imer) as uv
from 
(select imei, city, count(1) as pv from a where imei != &quot;group by imei, city&quot;)t1
join 
(select imei, type, count(1) as pv from a where imei != &quot;group by imei, type&quot;)t2
on t1.imei = t2.imei
group by t1.city,t2.type
</code></pre>
</blockquote>
</blockquote>
<h3 id="r语言-python脚本案例">R语言、python脚本案例</h3>
<blockquote>
<p>R：<br>
背景：对于一个产品的重要指标如留存，影响的因素很多，那么就需要找到这些影响因子的重要性，从而知道围绕哪些因素运营来更好的实现。<br>
换一种方式来季节上面这段话：哪些指标能够区分用户留存还是未留存，越是明显区分，越重要。转化为机器学习语言：对于一个用户，他有一个y（留存/未留存），还有很多x（各种影响因素），需要找到x与y的关系，并给出x的重要性排序。可以用随机森林，逻辑回归，决策树来实现。</p>
<p>python：<br>
爬虫<br>
文本挖掘<br>
UDF函数</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第三讲 中小型企业数据分析工作]]></title>
        <id>https://AnonymityToAll.github.io/post/di-san-jiang-zhong-xiao-xing-qi-ye-shu-ju-fen-xi-gong-zuo/</id>
        <link href="https://AnonymityToAll.github.io/post/di-san-jiang-zhong-xiao-xing-qi-ye-shu-ju-fen-xi-gong-zuo/">
        </link>
        <updated>2020-08-10T11:39:42.000Z</updated>
        <content type="html"><![CDATA[<p>###三个问题解答</p>
<h5 id="流量波动">流量波动</h5>
<blockquote>
<p>举例：美团外卖近期订单量下降5%，需要分析师给出一些解释并提供下一步建议</p>
<p>答案：<br>
1.先对命题进行解析：<br>
订单量下降5%属于什么水位，影响范围多大，如果发现对收入有重大影响，那么这个时候CEO都会关注这件事，所以就要更加全面的考虑这件事。</p>
<p>2.具体的分析模块：</p>
<ul>
<li>常识判断：节假日啥的</li>
<li>竞品数据：饿了么数据大涨</li>
<li>外部事件：社会负面事件</li>
<li>产品变化：产品是不是发布了新的版本</li>
<li>用户行为：订单地域行为，全国都下降还是某个地区下降。</li>
<li>数据问题：数据采集，是不是口径变化</li>
</ul>
<p>3.流量波动还可能是外部作弊</p>
</blockquote>
<h5 id="常见三个app-数据分析师的思考深度怎么样好奇心怎么样">常见三个app--数据分析师的思考深度怎么样，好奇心怎么样</h5>
<blockquote>
<p>参考答案：<br>
这里的建议是：说跟应聘岗位相关的APP，比如应聘的产品的QQ音乐。<br>
这个时候你就可以说常用的三款APP是网易云音乐、微信读书、知乎，尽量给面试官透露一些你的亮点。</p>
<p>面试官进一步问：就以网易云来说，说一下你喜欢的点和想吐槽的点。</p>
<p>面试官再问：好的，那么如果你是产品经理，你会怎么解决这个问题<br>
回答：先看数据，再说对应措施。</p>
<p>面试官再问：怎么评估这样做能够带来指标的提升<br>
回答：这种先开始小流量AB测试，然后再慢慢放量，如果效果不错，就全量</p>
<p>面试官再问：怎么进行ABtest，说一下对它的看法</p>
</blockquote>
<h5 id="商业化变现对商业的最终目的是否敏感">商业化变现：对商业的最终目的是否敏感</h5>
<blockquote>
<p>举例：能不能举例一款工具类产品说明其是如何商业化的。</p>
<p>面试官问：目前产品的主要商业化收入来自哪里</p>
<p>面试官问：当前产品商业化提升的痛点是什么，之前做过哪些优化方案，效果如何</p>
<p>面试官问：能不能说一下这个项目</p>
</blockquote>
<h3 id="日常工作解析">日常工作解析</h3>
<h5 id="角色-斜杠青年救火队员啥都干">角色--斜杠青年：救火队员啥都干</h5>
<blockquote>
<ul>
<li>技术上
<ul>
<li>java，python，r都熟练，机器学习的书看了一本又一本</li>
<li>觉得技术功底还可以，但是没有真正的落地果</li>
</ul>
</li>
<li>研发埋点
<ul>
<li>字段格式，字段名，打点日志，文档沉淀</li>
</ul>
</li>
<li>口径和指标梳理
<ul>
<li>dau,mau的定义和计算方法</li>
<li>某产品的核心指标以及具体业务指标</li>
</ul>
</li>
<li>报表统计
<ul>
<li>所有的报表增加、修改</li>
<li>改来改去还是没完</li>
</ul>
</li>
<li>专题分析
<ul>
<li>开展营销活动，需要做一次活动分析</li>
<li>整体做单点分析，缺乏逻辑连贯性和全面性</li>
</ul>
</li>
<li>平台研发
<ul>
<li>希望开发内部一套大数据平台，比如数据仓库，友盟这种</li>
<li>参与开发或参与底层数据清洗</li>
</ul>
</li>
</ul>
<p>容易遇到的问题：</p>
<ul>
<li>自卑，学这学那，不落地学得快忘得快</li>
<li>自信，想着跳槽，但是好像跳不出去</li>
</ul>
</blockquote>
<h3 id="转型四步法">转型四步法</h3>
<p>一定要去大的企业做事情。</p>
<p>好工作：</p>
<ul>
<li>当前薪酬不错</li>
<li>在行业中薪酬前列</li>
</ul>
<blockquote>
<p>1.规划好自己，再评估和准备</p>
<p>数据分析三条线：</p>
<ul>
<li>业务线：对事物好奇并深入研究，思维发散并且能收敛，喜欢展示自我，逻辑思维较强</li>
<li>研发线：计算机功底好，天生的程序员基因</li>
<li>算法线：适合做研究的同学，数学功底好</li>
</ul>
<p>2.评估自己</p>
<p>业务型：</p>
<ul>
<li>产品理解能力：各种数据熟悉度，用户从哪里来，进来后做了什么</li>
<li>分析方法论：常见方法有哪些，abtest，最大概率法则，28法则，幸存者偏差理解</li>
<li>可视化能力</li>
<li>演讲能力</li>
<li>协作能力</li>
<li>逻辑思维</li>
<li>技术：excel常见操作，sql能不能闭着眼写，r能不能搭建模型并知道有哪些坑，python能否很好地用上</li>
</ul>
<p>3.优化自己1</p>
<p>3.优化自己2<br>
方法论：指标体系方法论，流量分析方法论，路径分析方法论，产品分析方法论，营销活动方法论，用户流失方法论</p>
<p>4.寻找对象并实践</p>
<p>挑选三家一般公司：面试训练<br>
挑选2家规模较大，知名度高的：保底要进（简历一定要认真写，多打磨）<br>
挑选2家业内知名公司--尝试</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第二讲 BAT企业数据分析工作]]></title>
        <id>https://AnonymityToAll.github.io/post/bat-qi-ye-shu-ju-fen-xi-gong-zuo/</id>
        <link href="https://AnonymityToAll.github.io/post/bat-qi-ye-shu-ju-fen-xi-gong-zuo/">
        </link>
        <updated>2020-08-08T15:01:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="招聘解析">招聘解析</h2>
<h5 id="去除神秘感">去除神秘感</h5>
<p>阿里：对技术要求不是很高，对综合能力要求非常高</p>
<p>腾讯：埋点，检测异常，ABtest，增长黑客的经验（那本书需要看一看）</p>
<p>百度：专项，逻辑思维，用户增长</p>
<p>总：为了用户增长</p>
<h5 id="看到差距">看到差距</h5>
<h5 id="如何准备">如何准备</h5>
<h2 id="日常工作">日常工作</h2>
<h5 id="数据异常排查">数据异常排查</h5>
<p>要有标准的排查流程，要有方法论</p>
<blockquote>
<p>1.数据本身有问题<br>
2.或者业务本身有问题</p>
<p>数据异常排查之前期准备：</p>
<ul>
<li>业务理解</li>
<li>指标口径</li>
<li>当前数据产出过程</li>
</ul>
<p>数据异常排除之方法论</p>
<ul>
<li>判断是否异常
<ul>
<li>亲自去看数据的变化</li>
<li>时间轴一定要拉长（近三个月）</li>
<li>看这个指标与其他关联的指标是不是也是异常的</li>
<li>找到关键人物提前沟通一下（找一个人文一下，通过经验判断）</li>
</ul>
</li>
<li>最大概率法则归类
<ul>
<li>假期效应：开学季、暑假、四大节、当地节日</li>
<li>热点事件：常规热点如世界杯、突发热点某爆款IP</li>
<li>活动影响：双11，618</li>
<li>政策影响：互联网金融监管、快递行业实名</li>
<li>底层系统故障</li>
<li>统计口径</li>
</ul>
</li>
<li>闭环
<ul>
<li>持续跟踪后续数据</li>
<li>记录沉淀文档化</li>
<li>邮件化：只有确认了没有问题的时候再邮件，描述影响范围和主要结论即可</li>
</ul>
</li>
</ul>
</blockquote>
<h5 id="融入专项背kpi">融入专项背KPI</h5>
<p>项目组专题分析有三个特征：</p>
<ul>
<li>有目标，津贴项目KPI</li>
<li>有节奏，2-3周时间输出一份完整报告</li>
<li>有闭环，所有的报告说人话，用大白话</li>
</ul>
<p>阐述报告的数量和质量，即落地的点</p>
<h5 id="还有很多如埋点-指标体系之后再说">还有很多如埋点、指标体系之后再说</h5>
<h2 id="面试技巧和必问问题">面试技巧和必问问题</h2>
<p>第一面：最重要的逻辑性，绝对会对着简历上的东西问，哪些渠道，渠道都有啥</p>
<p>第二面：微笑，带上专题分析报告，结合app提前想好问题，并分析（带着主题）</p>
<p>第三面：总监面：代表型项目，行业趋势，了解产品宏观区域</p>
<h5 id="必问的几个问题">必问的几个问题：</h5>
<ol>
<li>流量波动：某天数据突然涨了，怎么分析</li>
<li>三个常用app：套路很深，好好思考</li>
<li>商业模式：之前产品的cpc，cpm，说到底还是赚钱</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第一讲 国企数据分析工作]]></title>
        <id>https://AnonymityToAll.github.io/post/di-yi-jiang-guo-qi-shu-ju-fen-xi-gong-zuo/</id>
        <link href="https://AnonymityToAll.github.io/post/di-yi-jiang-guo-qi-shu-ju-fen-xi-gong-zuo/">
        </link>
        <updated>2020-08-08T08:43:11.000Z</updated>
        <content type="html"><![CDATA[<h2 id="招聘解析">招聘解析</h2>
<h5 id="工行">工行</h5>
<ul>
<li>职责模糊</li>
<li>要求技术化</li>
<li>氛围相对保守</li>
</ul>
<h5 id="招行">招行</h5>
<ul>
<li>职责具体</li>
<li>要求宽泛</li>
<li>追求创新</li>
</ul>
<h5 id="广发">广发</h5>
<ul>
<li>业务线比较杂</li>
<li>SAS语言</li>
<li>要求模糊运气重要</li>
</ul>
<h5 id="电信">电信</h5>
<ul>
<li>各种报</li>
<li>专题分析</li>
<li>独立思考</li>
<li>基本就是大部分数据分析师做的事情</li>
</ul>
<h2 id="常规工作">常规工作</h2>
<h5 id="日周月报">日周月报</h5>
<ul>
<li>日报
<ul>
<li>各种数据资源整理</li>
<li>数据敏感性</li>
<li>数据波动解释</li>
<li>给优化建议</li>
</ul>
</li>
<li>周报
<ul>
<li>看发展趋势</li>
</ul>
</li>
<li>月报
<ul>
<li>一定要有接下来发展的建议</li>
</ul>
</li>
</ul>
<h5 id="临时数据">临时数据</h5>
<p>管理层需要：</p>
<ul>
<li>不能立刻就做，但是也不能拖</li>
<li>了解背景（问问leader是在什么背景下需要的）</li>
<li>核对再核对（只能一遍）</li>
<li>简单明了</li>
<li>反思到思考</li>
</ul>
<p>业务执行人员需要：</p>
<ul>
<li>永无止境、失控，要完一个还要一个</li>
<li>为何要这么做</li>
<li>怎么样闭环</li>
</ul>
<p>解决：<br>
坚决不做提数机器，针对每一个业务但点问题，先追根溯源，简历该业务类的分析框架，由点到面，彻底解决该类问题；同时在这个过程中，要不断利用互惠原则和社交技巧</p>
<h5 id="常规工作优化">常规工作优化</h5>
<ul>
<li>机器人发日报（python）</li>
<li>目标建立（杂事中仍然自我清醒）</li>
<li>寻找领导帮助</li>
</ul>
<h2 id="专题分析">专题分析</h2>
<h5 id="需求解读">需求解读</h5>
<p>至少百分之20的时间在沟通需求上</p>
<h5 id="建立逻辑树">建立逻辑树</h5>
<h5 id="sql提数及分析">sql提数及分析</h5>
<ul>
<li>组成部分</li>
<li>数量比较</li>
<li>有何变化</li>
<li>各项分布</li>
<li>各项相关性</li>
<li>其他深层次挖掘</li>
</ul>
<h5 id="撰写报告">撰写报告</h5>
<ul>
<li>90图加10文</li>
<li>标题即结论（结论前置）</li>
<li>讲故事（知道领导想听什么，面试带着好的报告效果会很好）</li>
</ul>
<h2 id="软技能及面试技巧">软技能及面试技巧</h2>
<ul>
<li>吹水力</li>
<li>展示力</li>
<li>时间管理力</li>
<li>预判力</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQL刷题-牛客-较难]]></title>
        <id>https://AnonymityToAll.github.io/post/sql-shua-ti-niu-ke-jiao-nan/</id>
        <link href="https://AnonymityToAll.github.io/post/sql-shua-ti-niu-ke-jiao-nan/">
        </link>
        <updated>2020-08-06T12:09:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="牛客网题目之中等">牛客网题目之中等</h1>
<h5 id="t17">T17</h5>
<pre><code class="language-sql">select emp_no, salary
from salaries
where to_date = '9999-01-01'
order by salary desc
limit 1, 1
</code></pre>
<blockquote>
<p>没有加desc，默认是单增的，所以出现了问题</p>
</blockquote>
<h5 id="t18">T18</h5>
<pre><code class="language-sql">select e.emp_no, s.salary, e.last_name, e.first_name
from employees as e inner join salaries as s 
on e.emp_no = s.emp_no
where s.to_date='9999-01-01'
order by salary desc
limit 1, 1
</code></pre>
<blockquote>
<p>没有加where<br>
没有加desc<br>
题目要求不用orderby 然而我用了</p>
</blockquote>
<pre><code class="language-sql">select e.emp_no, max(s.salary), e.last_name, e.first_name
from employees e inner join salaries s on e.emp_no = s.emp_no
where to_date='9999-01-01'
and salary &lt; (select max(s.salary)from salaries s 
                    where s.to_date='9999-01-01')
</code></pre>
<blockquote>
<p>这是不用order by的版本</p>
</blockquote>
<h5 id="t19">T19</h5>
<p>错误示例：</p>
<pre><code class="language-sql">select e.last_name, e.first_name, depa.dept_name
from employees as e 
left join departments as depa
on depa.dept_no = dept.dep_no
left join dept_emp as dept
on dept.emp_no = e.emp_no
</code></pre>
<blockquote>
<p>错误有两个地方：</p>
<ul>
<li>
<p>dept再没有声明之前就使用了，即需要调换</p>
<pre><code class="language-sql">left join departments as depa
on depa.dept_no = dept.dep_no
</code></pre>
<pre><code class="language-sql">left join dept_emp as dept
on dept.emp_no = e.emp_no
</code></pre>
<p>的位置</p>
</li>
<li>
<p>dept.dept_no写成了dept.dep_no</p>
</li>
</ul>
</blockquote>
<p>正确示例：</p>
<pre><code class="language-sql">select e.last_name, e.first_name, depa.dept_name
from employees as e 
left join dept_emp as dept
on dept.emp_no = e.emp_no
left join departments as depa
on depa.dept_no = dept.dept_no
</code></pre>
<h5 id="t20">T20</h5>
<pre><code class="language-sql">select max(salary)-min(salary) as growth
from salaries
where emp_no = 10001
group by emp_no
</code></pre>
<blockquote>
<p>一次通过！！！</p>
</blockquote>
<h5 id="t21">T21</h5>
<pre><code class="language-sql">select t1.emp_no, t1.salary-t2.salary as growth
from employees as e 
join (select emp_no, salary from salaries
     where to_date='9999-01-01') as t1
on t1.emp_no = e.emp_no
join (select e.emp_no, s.salary from salaries as s 
     join employees as e on e.emp_no = s.emp_no
     where s.from_date=e.hire_date) as t2
on t2.emp_no = e.emp_no
order by growth asc 
</code></pre>
<h5 id="t22">T22</h5>
<p>错误示例：</p>
<pre><code class="language-sql">select de.dept_no, d.dept_name, count(s.emp_no) as sum
from departments as d 
join dept_emp as de on d.dept_no = de.dept_no
join salaries as s on s.emp_no = de.emp_no
</code></pre>
<p>正确示例：</p>
<pre><code class="language-sql">select de.dept_no, d.dept_name, count(s.emp_no) as sum
from departments as d 
join dept_emp as de on d.dept_no = de.dept_no
join salaries as s on s.emp_no = de.emp_no
group by de.dept_no
</code></pre>
<p>问的是部门的记录总共有多少，所以要按照部门分组</p>
<h5 id="t23">T23</h5>
<pre><code class="language-sql">select emp_no,salary,dense_rank() over (order by salary desc) as rank
from salaries
where to_date='9999-01-01'
</code></pre>
<p><a href="https://www.cnblogs.com/scwbky/p/9558203.html">rank() over类别</a></p>
<blockquote>
<p>这里不太懂怎么实现在salary相同的时候使用emp_no排序的</p>
</blockquote>
<h5 id="t24">T24</h5>
<p>错误示例：</p>
<pre><code class="language-sql">select m.dept_no, m.emp_no, s.salary 
from dept_manager as m 
join employees as e 
on m.emp_no = e.emp_no
join salaries as s 
on s.emp_no = e.emp_no
where s.to_date = '9999-01-01' and m.emp_no != e.emp_no
</code></pre>
<p>正确示例：</p>
<pre><code class="language-sql">select de.dept_no, de.emp_no, s.salary
from dept_emp as de join employees as e 
on de.emp_no = e.emp_no
join salaries as s 
on de.emp_no = s.emp_no
where s.to_date='9999-01-01' and e.emp_no not in (
select emp_no from dept_manager)
</code></pre>
<blockquote>
<p>不能用dept_manager里的东西 所以给的四个表都是有用的 不是说可以瞎用的</p>
</blockquote>
<h5 id="t25font-face微软雅黑-size4-colorff0000-标红font">T25<font face="微软雅黑" size=4 color=#FF0000 >标红</font></h5>
<p>错误示例：</p>
<pre><code class="language-sql">select d.emp_no, m.emp_no, emp_salary, manager_salary
from (select d.dept_no, d.emp_no, s.salary as emp_salary
from dept_emp as d join salaries as s 
on d.emp_no = s.emp_no
where s.to_date = '9999-01-01' and m.to_date = '9999-01-01') 
as t1
join (select d.dept_no, m.emp_no, s.salary as manager_salary
from dept_manager as m join salaries as s 
on m.emp_no = s.emp_no
where s.to_date = '9999-01-01' and m.to_date = '9999-01-01')
as t2
on t1.emp_no = t2.emp_no
where emp_salary &gt; manager_salary
</code></pre>
<p>正确示例：</p>
<pre><code class="language-sql">select t1.emp_no,manager_no,emp_salary,manager_salary
from(
    select dept_no,d1.emp_no,salary as emp_salary
    from dept_emp as d1 inner join salaries as s on d1.emp_no=s.emp_no
    where d1.to_date='9999-01-01' and s.to_date='9999-01-01'
    ) t1
inner join(
    select dept_no,d2.emp_no as manager_no,salary as manager_salary
    from dept_manager as d2 inner join salaries as s on d2.emp_no=s.emp_no
    where d2.to_date='9999-01-01' and s.to_date='9999-01-01'
    ) t2
on t1.dept_no=t2.dept_no
where t1.emp_salary&gt;t2.manager_salary;
</code></pre>
<h5 id="t26">T26</h5>
<pre><code class="language-sql">select d.dept_no,d.dept_name,t.title,count(*)
from dept_emp de
inner join departments as d
on de.dept_no = d.dept_no
inner join titles as t
on de.emp_no=t.emp_no
where de.to_date = '9999-01-01'
and t.to_date = '9999-01-01'
group by d.dept_no,t.title
</code></pre>
<blockquote>
<p>原来可以直接按照两个元素分组</p>
</blockquote>
<h5 id="t27">T27</h5>
<pre><code class="language-sql">select s2.emp_no , s2.from_date , (s2.salary-s1.salary) as salary_growth
from salaries s1 join salaries s2 on s1.emp_no = s2.emp_no
and s2.from_date = s1.to_date 
where s2.salary-s1.salary &gt; 5000
order by salary_growth desc
</code></pre>
<blockquote>
<p>没做出来</p>
<p>因为这个题要求把每年工资涨幅超过5000的人列出来，纠结于怎么体现每年和工资涨幅怎么体现<br>
看了别人的代码，其实主要还是两个地方，<br>
一个，是把一个表作为两个表来链接的思想。<br>
一个，是s2.from_date = s1.to_date就代表了每年工资有变化的人。再加上下面的&quot;&gt;5000&quot;便体现了题目要找的东西</p>
</blockquote>
<h5 id="t28">T28</h5>
<p>错误示例：</p>
<pre><code class="language-sql">select c.name, count(f.film_id)
from category as c inner join film_category as fc
on c.category_id = fc.category_id
inner join film as f 
on f.film_id = fc.film_id
where f.description like &quot;*robot*&quot; and count(f.film_id)&gt;=5
group by c.name
</code></pre>
<blockquote>
<p>第二个count，count的是筛选之后的部分，所以与题意是不符的。</p>
</blockquote>
<p>正确示例：</p>
<pre><code class="language-sql">SELECT c.name, COUNT(fc.film_id)
FROM film AS f, film_category AS fc, category AS c
WHERE f.description LIKE '%robot%'
AND f.film_id = fc.film_id
AND c.category_id = fc.category_id
AND c.category_id IN (select category_id
FROM film_category
GROUP BY category_id
HAVING count(film_id)&gt;=5)
GROUP BY c.name;
</code></pre>
<blockquote>
<p>不要问，问就是没做出来...，老想着inner join  但其实不需要</p>
</blockquote>
<h5 id="t29">T29</h5>
<pre><code class="language-sql">select f.film_id, f.title
from film as f left join film_category as fc
on f.film_id = fc.film_id
where fc.category_id is NULL
</code></pre>
<blockquote>
<p>哈哈哈 做出来了<br>
需要注意的是最后判断空用 is null，不是&quot;=NULL&quot;，也不是“=&quot;NULL&quot;”</p>
</blockquote>
<h5 id="t30">T30</h5>
<pre><code class="language-sql">select f.title, f.description
from film as f inner join film_category as fc
on f.film_id = fc.film_id
inner join category as c 
on c.category_id = fc.category_id
where c.name = &quot;Action&quot;
</code></pre>
<blockquote>
<p>一遍出结果（whisper：没用它要求的方法）</p>
</blockquote>
<h5 id="t31">T31</h5>
<pre><code class="language-sql">explain select * from employees
</code></pre>
<blockquote>
<p>没看懂题目，因为确实也没学过explain</p>
</blockquote>
<h5 id="t32">T32</h5>
<pre><code class="language-sql">select last_name || ' ' || first_name as Name
from employees
</code></pre>
<h5 id="t33">T33</h5>
<p>我的没有通过的：</p>
<pre><code class="language-sql">create table actor
(
    actor_id smallint(5),
    first_name varchar(45),
    last_name varchar(45),
    last_update timestamp
)
</code></pre>
<p>别人的通过了的：</p>
<pre><code class="language-sql">create table  if not exists actor(
    actor_id smallint(5) not null,
    first_name varchar(45) not null,
    last_name varchar(45) not null,
    last_update timestamp not null default (datetime('now', 'localtime')),
    primary key(actor_id)
)
</code></pre>
<blockquote>
<p>其中if not exists是为了增加代码的鲁棒性<br>
primary key是指的主键列，每个表都需要有一个且仅有一个主键列。<br>
主键列的值不能为空。<br>
timestamp那一列需要初始化</p>
</blockquote>
<h5 id="t34">T34</h5>
<pre><code class="language-sql">INSERT INTO actor (actor_id, first_name, last_name, last_update)
VALUES
(1, 'PENELOPE', 'GUINESS', '2006-02-15 12:34:33'),
(2, 'NICK', 'WAHLBERG', '2006-02-15 12:34:33')
</code></pre>
<h5 id="t35">T35</h5>
<pre><code class="language-SQL">INSERT OR IGNORE INTO actor (actor_id, first_name, last_name, last_update)
VALUES
('3', 'ED', 'CHASE', '2006-02-15 12:34:33')
</code></pre>
<h5 id="t36">T36</h5>
<pre><code class="language-SQL">create table actor_name  as
select first_name,last_name from actor
</code></pre>
<h5 id="t37">T37</h5>
<pre><code class="language-sql">create unique index uniq_idx_firstname on actor(first_name);
create index idx_lastname on actor(last_name);
</code></pre>
<h5 id="t38">T38</h5>
<pre><code class="language-sql">CREATE VIEW actor_name_view(first_name_v, last_name_v) AS
select first_name, last_name
from actor
</code></pre>
<h5 id="t39">T39</h5>
<pre><code class="language-sql">SELECT * FROM salaries INDEXED BY idx_emp_no WHERE emp_no = 10005
</code></pre>
<h5 id="t40">T40</h5>
<pre><code class="language-sql">ALTER TABLE actor ADD COLUMN create_date datetime not null default('0000-00-00 00:00:00');
</code></pre>
<h5 id="t41">T41</h5>
<pre><code class="language-sql">create trigger audit_log after insert on employees_test
begin
    insert into audit values(new.id,new.name);
end
</code></pre>
<h5 id="t42">T42</h5>
<p>错误示例：</p>
<pre><code class="language-sql">select min(id) 
from titles_test
group by emp_no
</code></pre>
<p>正确示例：</p>
<pre><code class="language-sql">DELETE FROM titles_test WHERE id NOT IN
(SELECT MIN(id) FROM titles_test GROUP BY emp_no)
</code></pre>
<h5 id="t43">T43</h5>
<pre><code class="language-sql">UPDATE titles_test SET to_date = NULL, from_date = '2001-01-01'WHERE to_date = '9999-01-01';
</code></pre>
<h5 id="t44">T44</h5>
<pre><code class="language-sql">UPDATE titles_test SET emp_no = REPLACE(emp_no,10001,10005) WHERE id = 5
</code></pre>
<h5 id="t45">T45</h5>
<pre><code class="language-sql">alter table titles_test rename to titles_2017;
</code></pre>
<h5 id="t46">T46</h5>
<pre><code class="language-sql">drop table audit;
create table audit(
    EMP_no int not null,
    create_date datetime not null,
    foreign key(EMP_no)
    references employees_test(ID)
);
</code></pre>
<h3 id=""></h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQL刷题-牛客-中等]]></title>
        <id>https://AnonymityToAll.github.io/post/pin-duo-duo-bi-shi-zhun-bei-yi-sql/</id>
        <link href="https://AnonymityToAll.github.io/post/pin-duo-duo-bi-shi-zhun-bei-yi-sql/">
        </link>
        <updated>2020-07-31T01:47:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="牛客网题目之中等">牛客网题目之中等</h1>
<h3 id="sql刷题">sql刷题</h3>
<h5 id="t3">T3</h5>
<pre><code class="language-sql">select salaries.*, dept_manager.dept_no
from salaries inner join dept_manager
on salaries.emp_no = dept_manager.emp_no
where salaries.to_date='9999-01-01' and dept_manager.to_date='9999-01-01'
</code></pre>
<blockquote>
<p>说明：</p>
<pre><code class="language-sql">from salaries inner join dept_manager
on salaries.emp_no = dept_manager.emp_no
</code></pre>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>o</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">on</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span></span></span></span>后面跟着两个表相同的部分</p>
</blockquote>
<h5 id="t4">T4</h5>
<p>错误示例：</p>
<pre><code class="language-sql">select e.last_name, e.first_name, d.dept_no
from employees as e inner join dept_emp as d
on employees.emp_no = dept_emp.emp_no
</code></pre>
<p>正确示例</p>
<pre><code class="language-sql">select e.last_name, e.first_name, d.dept_no
from employees as e inner join dept_emp as d
on e.emp_no = d.emp_no
</code></pre>
<pre><code class="language-sql">select employees.last_name, employees.first_name, dept_emp.dept_no
from employees inner join dept_emp
on employees.emp_no = dept_emp.emp_no
</code></pre>
<h5 id="t5">T5</h5>
<pre><code class="language-sql">select e.last_name, e.first_name, d.dept_no
from employees as e left join dept_emp as d 
on e.emp_no = d.emp_no
</code></pre>
<blockquote>
<p>刚开始select没有选择dept_no</p>
</blockquote>
<h5 id="t6">T6</h5>
<p>错误示例：</p>
<pre><code class="language-sql">select e.emp_no, s.salary
from employees as e join salaries as s 
on e.emp_no = s.emp_no
where salaries.from_date = employees.hire_date
order by e.emp_no desc
</code></pre>
<p>正确示例：</p>
<pre><code class="language-sql">select e.emp_no, s.salary
from employees as e join salaries as s 
on e.emp_no = s.emp_no
where s.from_date = e.hire_date
order by e.emp_no desc
</code></pre>
<pre><code class="language-sql">select employees.emp_no, salaries.salary
from employees join salaries
on employees.emp_no = salaries.emp_no
where salaries.from_date = employees.hire_date
order by employees.emp_no desc
</code></pre>
<h5 id="t7">T7</h5>
<pre><code class="language-sql">select emp_no, count(distinct salary) as t 
from salaries
group by emp_no
having t &gt; 15
</code></pre>
<blockquote>
<p>count 数的是分组之后的salary数据</p>
</blockquote>
<h5 id="t8">T8</h5>
<pre><code class="language-sql">select distinct salary
from salaries
where to_date = '9999-01-01'
order by salary desc
</code></pre>
<h5 id="t9">T9</h5>
<pre><code class="language-sql">select d.dept_no, d.emp_no, s.salary
from dept_manager as d join salaries as s 
on d.emp_no = s.emp_no
where d.to_date='9999-01-01' and s.to_date='9999-01-01'
</code></pre>
<h5 id="t10">T10</h5>
<pre><code class="language-sql">select emp_no from employees
where emp_no not in (select emp_no from dept_manager)
</code></pre>
<blockquote>
<p>not in 写成了 in</p>
</blockquote>
<h5 id="t11">T11</h5>
<pre><code class="language-sql">select dept_emp.emp_no, dept_manager.emp_no
from dept_emp join dept_manager
on dept_emp.dept_no = dept_manager.dept_no
where dept_manager.to_date='9999-01-01' and dept_emp.to_date = '9999-01-01' and dept_emp.emp_no &lt;&gt; dept_manager.emp_no
</code></pre>
<blockquote>
<p>出了很多错。</p>
<ul>
<li>select 后面跟的有问题</li>
<li>on 后面的也有问题</li>
<li>最后where的条件没想出来</li>
</ul>
<p>应该先理解清楚题的意思再编程</p>
</blockquote>
<h5 id="t12">T12</h5>
<pre><code class="language-sql">select d.dept_no,s.emp_no,max(s.salary)
from dept_emp as d inner join salaries as s 
on d.emp_no = s.emp_no
where d.to_date = '9999-01-01' and s.to_date = '9999-01-01'
group by d.dept_no
</code></pre>
<blockquote>
<p>理解错题的意思了，应该是给出每个部门的最高薪水，不是所有部门的最高薪水</p>
</blockquote>
<h5 id="t13">T13</h5>
<pre><code class="language-sql">select title, count(title) as t
from titles
group by title
having t &gt;= 2
</code></pre>
<blockquote>
<p>一次通过！！！</p>
</blockquote>
<h5 id="t14">T14</h5>
<pre><code class="language-sql">select title, count(title) as t
from (
    select distinct emp_no, title
    from titles)
group by title
having t &gt;= 2
</code></pre>
<blockquote>
<p>一次通过！！！</p>
</blockquote>
<h5 id="t15">T15</h5>
<pre><code class="language-sql">select * 
from employees
where emp_no % 2 = 1 and last_name &lt;&gt; 'Mary'
order by hire_date desc
</code></pre>
<blockquote>
<p>一次通过！！！</p>
</blockquote>
<h5 id="t16">T16</h5>
<pre><code class="language-sql">select t.title, avg(s.salary) as avg
from titles as t inner join salaries as s
on t.emp_no = s.emp_no
where t.to_date = '9999-01-01' and s.to_date = '9999-01-01'
group by t.title
</code></pre>
<blockquote>
<p>忘记加where了</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[读书笔记--A股价值投资]]></title>
        <id>https://AnonymityToAll.github.io/post/du-shu-bi-ji-a-gu-jie-zhi-tou-zi/</id>
        <link href="https://AnonymityToAll.github.io/post/du-shu-bi-ji-a-gu-jie-zhi-tou-zi/">
        </link>
        <updated>2020-07-27T14:25:42.000Z</updated>
        <content type="html"><![CDATA[<h1 id="c2-寻找并分析一家企业是否值得投资">C2 寻找并分析一家企业是否值得投资</h1>
<h3 id="引言">引言</h3>
<p>之前说过投资的策略是”价值投资“，即：找定一个公司（做大量前期工作），然后巨资，长期持有。这一章讲怎么找到这样的公司，怎么判断一个公司有投资价值。</p>
<h3 id="价值投资写在前面的话">价值投资写在前面的话</h3>
<h5 id="价值投资的核心之一确定性">价值投资的核心之一：确定性</h5>
<ul>
<li>小市值企业高风险高收益</li>
<li>所谓确定性，即买入股票的时候心里要有很大的把握，是有逻辑的买入，无论是小市值还是中大市值</li>
<li>要长期跟踪，一旦自己的逻辑不成立就要马上跑路</li>
</ul>
<h5 id="价值投资的核心之二复利">价值投资的核心之二：复利</h5>
<ul>
<li>把所投资的公司研究透，然后静静的等待复利的威力</li>
<li>价值投资者，没有止损的概念，只有卖出的概念。什么时候卖出呢，估值极度高估，公司的基本面发生向下的变化。</li>
</ul>
<h5 id="价值投资的核心之三能力圈">价值投资的核心之三：能力圈</h5>
<ul>
<li>可以以地域来划分自己的能力圈：可以实地调研</li>
<li>可以关注消费股
<ul>
<li>分析消费股不需要太多的行业和专业知识，财务报表也很简单</li>
<li>业绩波动不剧烈</li>
<li>直观感很强</li>
</ul>
</li>
<li>可以跟自己的本职工作联系起来
<ul>
<li>不要太贪心，只做自己能力圈内的，否则就算一时赚了，也会亏回去</li>
<li>太了解有时候也不好，要学会跳出去</li>
</ul>
</li>
</ul>
<h3 id="寻找赚钱又值钱的公司">寻找赚钱又值钱的公司</h3>
<p>什么样的公司才是值得投资的好公司：好行业里的好公司，好行业非常重要。</p>
<h5 id="赚钱而不值钱的公司">赚钱而不值钱的公司</h5>
<p>特点：虽然赚钱，但是同质化严重，没有根本的优势，市场给的估值不高</p>
<h5 id="不赚钱但值钱的公司">不赚钱但值钱的公司</h5>
<p>具有唯一性，市场认可，但因为各种原因还没有赚钱</p>
<h5 id="赚钱而且值钱的公司">赚钱而且值钱的公司</h5>
<p>之前的公司的几大特征</p>
<ul>
<li>是所处行业第一，哪怕是细分市场的第一</li>
<li>是所在市场份额内有巨大的现金流动</li>
<li>产品具有巨大的差异化和巨大的替代性</li>
</ul>
<h3 id="挖掘自己能力圈内的个股-初步筛选">挖掘自己能力圈内的个股--初步筛选</h3>
<h5 id="首先找到地区到底有多少家上市公司">首先找到地区到底有多少家上市公司</h5>
<blockquote>
<p>这种名单比较好找，</p>
<ul>
<li>一是各个证券公司行情软件里都有一个办款叫做地区板块，进入相应地区板块即可卡到所有注册在该地区的公司。</li>
<li>二是当地的证监会网站也有名单，每个月更新</li>
</ul>
</blockquote>
<h5 id="其次就是筛选找到的名单">其次就是筛选找到的名单</h5>
<blockquote>
<p>初步筛选，通过下面几个指标：</p>
<ul>
<li>ST股自动排除</li>
<li>上一年亏损股排除</li>
<li>连续两年净利润下降排除</li>
<li>银行和地产排除</li>
<li>周期性行业排除</li>
<li>公司实际经营地不在所选地的</li>
<li>有负面的声音的可以排除</li>
</ul>
<p>一般而言上述指标可以通过行情软件的F10即可获得。</p>
<p>补充：<br>
公司的基本面是不断变化的，怕漏掉可以每年年报全部公布完毕之后，来做一次全面回顾</p>
<p>可以通过行业和净利润指标来进行初次的简单粗暴的筛选。<br>
净利润：如果上一年和上上年比净利润差不多，或者上年比上上年的净利润甚至海底，基本差不多的数据，那么大概当年的利润也不会太好。</p>
</blockquote>
<h3 id="挖掘自己能力圈内的个股-第二轮筛选">挖掘自己能力圈内的个股--第二轮筛选</h3>
<p>财报不能用来作为指导投资的唯一依据，但可以作为重要依据来筛选企业</p>
]]></content>
    </entry>
</feed>